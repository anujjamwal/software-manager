require 'spec_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

describe RequestsController do

  # This should return the minimal set of attributes required to create a valid
  # Request. As you add validations to Request, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) { {"project_code" => "isind"} }

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # RequestsController. Be sure to keep this updated too.
  let(:valid_session) { {} }
  let(:auth_user) { FactoryGirl.create(:user, name: 'Authenticated User', email: 'auth.user@sft.com') }
  let(:valid_session) { {'user_id' => auth_user.id} }

  it_behaves_like 'authenticable'

  describe 'actions' do
    before :each do
      controller.should_receive(:authorized!)
    end
    describe "GET index" do
      it "assigns all requests as @requests" do
        request = FactoryGirl.create :request
        controller.should_receive(:can?).with(:view_all).and_return(true)
        get :index, {}, valid_session
        assigns(:requests).should eq([request])
      end
    end

    describe "GET new" do
      it "assigns a new request as @request" do
        software = FactoryGirl.create :software
        get :new, {software_id: software.id}, valid_session
        assigns(:request).should be_a_new(Request)
      end
    end

    describe "POST create" do
      let(:software) { FactoryGirl.create(:software) }
      describe "with valid params" do
        it "creates a new Request" do
          expect {
            post :create, {:request => valid_attributes, software_id: software.id}, valid_session
          }.to change(Request, :count).by(1)
        end

        it "assigns a newly created request as @request" do
          post :create, {:request => valid_attributes, software_id: software.id}, valid_session
          assigns(:request).should be_a(Request)
          assigns(:request).should be_persisted
        end

        it "redirects to the created request" do
          post :create, {:request => valid_attributes, software_id: software.id}, valid_session
          response.should redirect_to(softwares_path)
        end
      end

      describe "with invalid params" do
        it "assigns a newly created but unsaved request as @request" do
          # Trigger the behavior that occurs when invalid params are submitted
          Request.any_instance.stub(:save).and_return(false)
          post :create, {:request => {"software_id" => "invalid value"}, software_id: software.id}, valid_session
          assigns(:request).should be_a_new(Request)
        end

        it "re-renders the 'new' template" do
          # Trigger the behavior that occurs when invalid params are submitted
          Request.any_instance.stub(:save).and_return(false)
          post :create, {:request => {"software_id" => "invalid value"}, software_id: software.id}, valid_session
          response.should render_template("new")
        end
      end
    end

    describe "DELETE destroy" do
      it "destroys the requested request" do
        request = FactoryGirl.create :request
        expect {
          delete :destroy, {:id => request.to_param, software_id: request.software_id}, valid_session
        }.to change(Request, :count).by(-1)
      end

      it "redirects to the requests list" do
        request = FactoryGirl.create :request
        delete :destroy, {:id => request.to_param, software_id: request.software_id}, valid_session
        response.should redirect_to(requests_url)
      end
    end
  end
end
